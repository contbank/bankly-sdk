// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	bankly "github.com/contbank/bankly-sdk"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// BanklyHttpClient is an autogenerated mock type for the BanklyHttpClient type
type BanklyHttpClient struct {
	mock.Mock
}

type BanklyHttpClient_Expecter struct {
	mock *mock.Mock
}

func (_m *BanklyHttpClient) EXPECT() *BanklyHttpClient_Expecter {
	return &BanklyHttpClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, url, body, header
func (_m *BanklyHttpClient) Delete(ctx context.Context, url string, body interface{}, header *http.Header) (*http.Response, error) {
	ret := _m.Called(ctx, url, body, header)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *http.Header) *http.Response); ok {
		r0 = rf(ctx, url, body, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, *http.Header) error); ok {
		r1 = rf(ctx, url, body, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BanklyHttpClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type BanklyHttpClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - url string
//  - body interface{}
//  - header *http.Header
func (_e *BanklyHttpClient_Expecter) Delete(ctx interface{}, url interface{}, body interface{}, header interface{}) *BanklyHttpClient_Delete_Call {
	return &BanklyHttpClient_Delete_Call{Call: _e.mock.On("Delete", ctx, url, body, header)}
}

func (_c *BanklyHttpClient_Delete_Call) Run(run func(ctx context.Context, url string, body interface{}, header *http.Header)) *BanklyHttpClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(*http.Header))
	})
	return _c
}

func (_c *BanklyHttpClient_Delete_Call) Return(_a0 *http.Response, _a1 error) *BanklyHttpClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Do provides a mock function with given fields: req
func (_m *BanklyHttpClient) Do(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BanklyHttpClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type BanklyHttpClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//  - req *http.Request
func (_e *BanklyHttpClient_Expecter) Do(req interface{}) *BanklyHttpClient_Do_Call {
	return &BanklyHttpClient_Do_Call{Call: _e.mock.On("Do", req)}
}

func (_c *BanklyHttpClient_Do_Call) Run(run func(req *http.Request)) *BanklyHttpClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *BanklyHttpClient_Do_Call) Return(_a0 *http.Response, _a1 error) *BanklyHttpClient_Do_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, url, query, header
func (_m *BanklyHttpClient) Get(ctx context.Context, url string, query map[string]string, header *http.Header) (*http.Response, error) {
	ret := _m.Called(ctx, url, query, header)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, *http.Header) *http.Response); ok {
		r0 = rf(ctx, url, query, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, *http.Header) error); ok {
		r1 = rf(ctx, url, query, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BanklyHttpClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type BanklyHttpClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - url string
//  - query map[string]string
//  - header *http.Header
func (_e *BanklyHttpClient_Expecter) Get(ctx interface{}, url interface{}, query interface{}, header interface{}) *BanklyHttpClient_Get_Call {
	return &BanklyHttpClient_Get_Call{Call: _e.mock.On("Get", ctx, url, query, header)}
}

func (_c *BanklyHttpClient_Get_Call) Run(run func(ctx context.Context, url string, query map[string]string, header *http.Header)) *BanklyHttpClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string), args[3].(*http.Header))
	})
	return _c
}

func (_c *BanklyHttpClient_Get_Call) Return(_a0 *http.Response, _a1 error) *BanklyHttpClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewRequest provides a mock function with given fields: ctx, method, url, body, query, header
func (_m *BanklyHttpClient) NewRequest(ctx context.Context, method string, url string, body interface{}, query map[string]string, header *http.Header) (*http.Request, error) {
	ret := _m.Called(ctx, method, url, body, query, header)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, map[string]string, *http.Header) *http.Request); ok {
		r0 = rf(ctx, method, url, body, query, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, map[string]string, *http.Header) error); ok {
		r1 = rf(ctx, method, url, body, query, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BanklyHttpClient_NewRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRequest'
type BanklyHttpClient_NewRequest_Call struct {
	*mock.Call
}

// NewRequest is a helper method to define mock.On call
//  - ctx context.Context
//  - method string
//  - url string
//  - body interface{}
//  - query map[string]string
//  - header *http.Header
func (_e *BanklyHttpClient_Expecter) NewRequest(ctx interface{}, method interface{}, url interface{}, body interface{}, query interface{}, header interface{}) *BanklyHttpClient_NewRequest_Call {
	return &BanklyHttpClient_NewRequest_Call{Call: _e.mock.On("NewRequest", ctx, method, url, body, query, header)}
}

func (_c *BanklyHttpClient_NewRequest_Call) Run(run func(ctx context.Context, method string, url string, body interface{}, query map[string]string, header *http.Header)) *BanklyHttpClient_NewRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(map[string]string), args[5].(*http.Header))
	})
	return _c
}

func (_c *BanklyHttpClient_NewRequest_Call) Return(_a0 *http.Request, _a1 error) *BanklyHttpClient_NewRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Patch provides a mock function with given fields: ctx, url, body, query, header
func (_m *BanklyHttpClient) Patch(ctx context.Context, url string, body interface{}, query map[string]string, header *http.Header) (*http.Response, error) {
	ret := _m.Called(ctx, url, body, query, header)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string, *http.Header) *http.Response); ok {
		r0 = rf(ctx, url, body, query, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, map[string]string, *http.Header) error); ok {
		r1 = rf(ctx, url, body, query, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BanklyHttpClient_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type BanklyHttpClient_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//  - ctx context.Context
//  - url string
//  - body interface{}
//  - query map[string]string
//  - header *http.Header
func (_e *BanklyHttpClient_Expecter) Patch(ctx interface{}, url interface{}, body interface{}, query interface{}, header interface{}) *BanklyHttpClient_Patch_Call {
	return &BanklyHttpClient_Patch_Call{Call: _e.mock.On("Patch", ctx, url, body, query, header)}
}

func (_c *BanklyHttpClient_Patch_Call) Run(run func(ctx context.Context, url string, body interface{}, query map[string]string, header *http.Header)) *BanklyHttpClient_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(map[string]string), args[4].(*http.Header))
	})
	return _c
}

func (_c *BanklyHttpClient_Patch_Call) Return(_a0 *http.Response, _a1 error) *BanklyHttpClient_Patch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Post provides a mock function with given fields: ctx, url, body, header
func (_m *BanklyHttpClient) Post(ctx context.Context, url string, body interface{}, header *http.Header) (*http.Response, error) {
	ret := _m.Called(ctx, url, body, header)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *http.Header) *http.Response); ok {
		r0 = rf(ctx, url, body, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, *http.Header) error); ok {
		r1 = rf(ctx, url, body, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BanklyHttpClient_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type BanklyHttpClient_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//  - ctx context.Context
//  - url string
//  - body interface{}
//  - header *http.Header
func (_e *BanklyHttpClient_Expecter) Post(ctx interface{}, url interface{}, body interface{}, header interface{}) *BanklyHttpClient_Post_Call {
	return &BanklyHttpClient_Post_Call{Call: _e.mock.On("Post", ctx, url, body, header)}
}

func (_c *BanklyHttpClient_Post_Call) Run(run func(ctx context.Context, url string, body interface{}, header *http.Header)) *BanklyHttpClient_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(*http.Header))
	})
	return _c
}

func (_c *BanklyHttpClient_Post_Call) Return(_a0 *http.Response, _a1 error) *BanklyHttpClient_Post_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Put provides a mock function with given fields: ctx, url, body, header
func (_m *BanklyHttpClient) Put(ctx context.Context, url string, body interface{}, header *http.Header) (*http.Response, error) {
	ret := _m.Called(ctx, url, body, header)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *http.Header) *http.Response); ok {
		r0 = rf(ctx, url, body, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, *http.Header) error); ok {
		r1 = rf(ctx, url, body, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BanklyHttpClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type BanklyHttpClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//  - ctx context.Context
//  - url string
//  - body interface{}
//  - header *http.Header
func (_e *BanklyHttpClient_Expecter) Put(ctx interface{}, url interface{}, body interface{}, header interface{}) *BanklyHttpClient_Put_Call {
	return &BanklyHttpClient_Put_Call{Call: _e.mock.On("Put", ctx, url, body, header)}
}

func (_c *BanklyHttpClient_Put_Call) Run(run func(ctx context.Context, url string, body interface{}, header *http.Header)) *BanklyHttpClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(*http.Header))
	})
	return _c
}

func (_c *BanklyHttpClient_Put_Call) Return(_a0 *http.Response, _a1 error) *BanklyHttpClient_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Request provides a mock function with given fields: ctx, method, url, body, query, header
func (_m *BanklyHttpClient) Request(ctx context.Context, method string, url string, body interface{}, query map[string]string, header *http.Header) (*http.Response, error) {
	ret := _m.Called(ctx, method, url, body, query, header)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, map[string]string, *http.Header) *http.Response); ok {
		r0 = rf(ctx, method, url, body, query, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, map[string]string, *http.Header) error); ok {
		r1 = rf(ctx, method, url, body, query, header)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BanklyHttpClient_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type BanklyHttpClient_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//  - ctx context.Context
//  - method string
//  - url string
//  - body interface{}
//  - query map[string]string
//  - header *http.Header
func (_e *BanklyHttpClient_Expecter) Request(ctx interface{}, method interface{}, url interface{}, body interface{}, query interface{}, header interface{}) *BanklyHttpClient_Request_Call {
	return &BanklyHttpClient_Request_Call{Call: _e.mock.On("Request", ctx, method, url, body, query, header)}
}

func (_c *BanklyHttpClient_Request_Call) Run(run func(ctx context.Context, method string, url string, body interface{}, query map[string]string, header *http.Header)) *BanklyHttpClient_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(map[string]string), args[5].(*http.Header))
	})
	return _c
}

func (_c *BanklyHttpClient_Request_Call) Return(_a0 *http.Response, _a1 error) *BanklyHttpClient_Request_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetErrorHandler provides a mock function with given fields: handler
func (_m *BanklyHttpClient) SetErrorHandler(handler bankly.ErrorHandler) {
	_m.Called(handler)
}

// BanklyHttpClient_SetErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetErrorHandler'
type BanklyHttpClient_SetErrorHandler_Call struct {
	*mock.Call
}

// SetErrorHandler is a helper method to define mock.On call
//  - handler bankly.ErrorHandler
func (_e *BanklyHttpClient_Expecter) SetErrorHandler(handler interface{}) *BanklyHttpClient_SetErrorHandler_Call {
	return &BanklyHttpClient_SetErrorHandler_Call{Call: _e.mock.On("SetErrorHandler", handler)}
}

func (_c *BanklyHttpClient_SetErrorHandler_Call) Run(run func(handler bankly.ErrorHandler)) *BanklyHttpClient_SetErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bankly.ErrorHandler))
	})
	return _c
}

func (_c *BanklyHttpClient_SetErrorHandler_Call) Return() *BanklyHttpClient_SetErrorHandler_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewBanklyHttpClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewBanklyHttpClient creates a new instance of BanklyHttpClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBanklyHttpClient(t mockConstructorTestingTNewBanklyHttpClient) *BanklyHttpClient {
	mock := &BanklyHttpClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
