// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	webhook "github.com/contbank/bankly-sdk/webhook"
	mock "github.com/stretchr/testify/mock"
)

// Webhook is an autogenerated mock type for the Webhook type
type Webhook struct {
	mock.Mock
}

type Webhook_Expecter struct {
	mock *mock.Mock
}

func (_m *Webhook) EXPECT() *Webhook_Expecter {
	return &Webhook_Expecter{mock: &_m.Mock}
}

// RegisterWebhook provides a mock function with given fields: ctx, data
func (_m *Webhook) RegisterWebhook(ctx context.Context, data webhook.RegisterWebhookRequest) (*webhook.RegisterWebhookResponse, error) {
	ret := _m.Called(ctx, data)

	var r0 *webhook.RegisterWebhookResponse
	if rf, ok := ret.Get(0).(func(context.Context, webhook.RegisterWebhookRequest) *webhook.RegisterWebhookResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.RegisterWebhookResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, webhook.RegisterWebhookRequest) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Webhook_RegisterWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterWebhook'
type Webhook_RegisterWebhook_Call struct {
	*mock.Call
}

// RegisterWebhook is a helper method to define mock.On call
//  - ctx context.Context
//  - data webhook.RegisterWebhookRequest
func (_e *Webhook_Expecter) RegisterWebhook(ctx interface{}, data interface{}) *Webhook_RegisterWebhook_Call {
	return &Webhook_RegisterWebhook_Call{Call: _e.mock.On("RegisterWebhook", ctx, data)}
}

func (_c *Webhook_RegisterWebhook_Call) Run(run func(ctx context.Context, data webhook.RegisterWebhookRequest)) *Webhook_RegisterWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webhook.RegisterWebhookRequest))
	})
	return _c
}

func (_c *Webhook_RegisterWebhook_Call) Return(out *webhook.RegisterWebhookResponse, err error) *Webhook_RegisterWebhook_Call {
	_c.Call.Return(out, err)
	return _c
}

type mockConstructorTestingTNewWebhook interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebhook creates a new instance of Webhook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebhook(t mockConstructorTestingTNewWebhook) *Webhook {
	mock := &Webhook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
