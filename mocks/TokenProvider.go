// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TokenProvider is an autogenerated mock type for the TokenProvider type
type TokenProvider struct {
	mock.Mock
}

type TokenProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenProvider) EXPECT() *TokenProvider_Expecter {
	return &TokenProvider_Expecter{mock: &_m.Mock}
}

// Token provides a mock function with given fields: ctx
func (_m *TokenProvider) Token(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenProvider_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type TokenProvider_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
//  - ctx context.Context
func (_e *TokenProvider_Expecter) Token(ctx interface{}) *TokenProvider_Token_Call {
	return &TokenProvider_Token_Call{Call: _e.mock.On("Token", ctx)}
}

func (_c *TokenProvider_Token_Call) Run(run func(ctx context.Context)) *TokenProvider_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TokenProvider_Token_Call) Return(_a0 string, _a1 error) *TokenProvider_Token_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTokenProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenProvider creates a new instance of TokenProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenProvider(t mockConstructorTestingTNewTokenProvider) *TokenProvider {
	mock := &TokenProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
